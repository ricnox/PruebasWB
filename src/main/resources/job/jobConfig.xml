<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/batch 
   
      http://www.springframework.org/schema/batch/spring-batch-2.2.xsd 
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<!-- Importamos la otra parte de la configuración (el archivo context.xml)
	Simplemente se ha dividido para una lectura y modificación más eficiente -->
	<import resource="context.xml" />
	
	<!-- Bean de la clase usuario
	 scope="prototype" hace que cada vez que pidamos a Spring un objeto usuario
	 creará un una nueva instancia.
	 Si fuera scope="singleton" se crearía única instancia compartida de la clase, 
	 por lo que siempre que se solicite este Bean se estará inyectando el mismo objeto
	 -->
	<bean id="usuario" class="spring.batch.Usuario"
		scope="prototype" />
	
	<!-- Indicamos dónde está nuestro Processor -->	
	<bean id="itemProcessor"
		class="spring.batch.CustomItemProcessor" />

	<batch:job id="jobUsuarios">
		<batch:step id="step1">
			<!-- tasklet es una interfaz simple con un sólo método de ejecución
			allow-start-if-complete="true" Me permite reiniciar el step de 0 -->
			<batch:tasklet allow-start-if-complete="true">
				<!-- chunk: porción de un tasklet 
				En el chunk indicamos cuál es nuestro reader, writer y el processor
				el intervalo de commit hace referencia al número de items a ser procesados antes de escribirlos
				En este caso, hará commit cada 10 items procesados
				-->
				<batch:chunk reader="mysqlItemReader"
					writer="mysqlItemWriter" processor="itemProcessor"
					commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<!-- Los listener nos permiten interceptar la ejecución de un job
		y realizar funcionalidades determinadas
		 -->
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>


	<bean id="mysqlItemReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource" />
		<property name="sql" value="SELECT usuarios.id, usuarios.nombre, usuarios.apellidos, usuarios.edad, compras.precio, compras.fecha 
		FROM usuarios INNER JOIN compras ON usuarios.id = compras.idusuario;" />
		<property name="rowMapper">
			<bean class="spring.batch.CustomRowMapper" />
		</property>
	</bean>

	<!-- Esto sería para insertarlo en un archivo .txt o .csv
		<bean id="flatFileItemWriter" class=" org.springframework.batch.item.file.FlatFileItemWriter"> 
		<property name="resource" value="file:datos.txt" /> <property name="lineAggregator"> 
		<bean class=" org.springframework.batch.item.file.transform.PassThroughLineAggregator" 
		/> </property> </bean> 
	-->

	<bean id="mysqlItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value> 
            <![CDATA[replace into ofertas (id, nombre, apellidos, oferta) 
               values (:id, :nombre, :apellidos, :oferta);]]>
			</value>
		</property>

		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<!-- Listener -->
	<bean id="jobListener"
		class="spring.batch.JobListener" />
</beans> 